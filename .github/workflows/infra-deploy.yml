name: Infra Deploy

on:
  push:
    branches: [main]
    paths:
      - "infra/**"
      - "backend/**"
      - ".github/workflows/infra-deploy.yml"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsLacatuRole
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build backend (shadowJar)
        run: |
          cd backend
          ./gradlew clean shadowJar || ./gradlew.bat clean shadowJar

      - name: Install CDK deps
        run: |
          cd infra
          npm ci

      - name: CDK Bootstrap (no-op if already bootstrapped)
        run: |
          cd infra
          npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID || '' }}/${{ secrets.AWS_REGION }}

      - name: CDK deploy (app only)
        working-directory: infra
        env:
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: |
          npm run build
          npx cdk deploy LacatuStack --require-approval never

      - name: Get stack outputs
        id: outputs
        run: |
          cd infra
          API_BASE_URL=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`ApiBaseUrl`].OutputValue' --output text)
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
          CLIENT_ID=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
          COGNITO_DOMAIN=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`CognitoDomain`].OutputValue' --output text)
          SITE_BUCKET=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`SiteBucketName`].OutputValue' --output text)
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' --output text)
          
          echo "api-base-url=$API_BASE_URL" >> $GITHUB_OUTPUT
          echo "user-pool-id=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "client-id=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "cognito-domain=$COGNITO_DOMAIN" >> $GITHUB_OUTPUT
          echo "site-bucket=$SITE_BUCKET" >> $GITHUB_OUTPUT
          echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

    outputs:
      api-base-url: ${{ steps.outputs.outputs.api-base-url }}
      user-pool-id: ${{ steps.outputs.outputs.user-pool-id }}
      client-id: ${{ steps.outputs.outputs.client-id }}
      cognito-domain: ${{ steps.outputs.outputs.cognito-domain }}
      site-bucket: ${{ steps.outputs.outputs.site-bucket }}
      distribution-id: ${{ steps.outputs.outputs.distribution-id }}
