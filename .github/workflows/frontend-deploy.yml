name: Frontend Deploy

on:
  push:
    branches: [main]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-deploy.yml"
  workflow_run:
    workflows: ["Infra Deploy"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsLacatuRole
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Check formatting
        run: |
          cd frontend
          npm run format:check

      - name: Lint code
        run: |
          cd frontend
          npm run lint

      - name: Get stack outputs
        id: stack-outputs
        run: |
          ITEMS_API_URL=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`ItemsApiBaseUrl`].OutputValue' --output text)
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
          CLIENT_ID=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
          COGNITO_DOMAIN=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`CognitoDomain`].OutputValue' --output text)
          SITE_BUCKET=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`SiteBucketName`].OutputValue' --output text)
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name LacatuStack --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' --output text)
          
          echo "items-api-url=$ITEMS_API_URL" >> $GITHUB_OUTPUT
          echo "user-pool-id=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "client-id=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "cognito-domain=$COGNITO_DOMAIN" >> $GITHUB_OUTPUT
          echo "site-bucket=$SITE_BUCKET" >> $GITHUB_OUTPUT
          echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Build frontend
        run: |
          cd frontend
          ITEMS_API_URL=${{ steps.stack-outputs.outputs.items-api-url }}
          USER_POOL=${{ steps.stack-outputs.outputs.user-pool-id }}
          CLIENT_ID=${{ steps.stack-outputs.outputs.client-id }}
          COGNITO_DOMAIN=${{ steps.stack-outputs.outputs.cognito-domain }}
          
          echo "VITE_ITEMS_API_URL=$ITEMS_API_URL" >> .env
          echo "VITE_API_BASE_URL=$ITEMS_API_URL" >> .env
          echo "VITE_COGNITO_USER_POOL_ID=$USER_POOL" >> .env
          echo "VITE_COGNITO_CLIENT_ID=$CLIENT_ID" >> .env
          echo "VITE_COGNITO_DOMAIN=$COGNITO_DOMAIN" >> .env
          npm run build

      - name: Upload to S3
        run: |
          BUCKET=${{ steps.stack-outputs.outputs.site-bucket }}
          aws s3 sync frontend/dist/ s3://$BUCKET --delete

      - name: Invalidate CloudFront
        run: |
          DIST_ID=${{ steps.stack-outputs.outputs.distribution-id }}
          aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"
